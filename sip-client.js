import JsSIP from 'jssip';

// === 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö SIP ===
const socket = new JsSIP.WebSocketInterface('wss://sip.example.com:7443'); // –£–∫–∞–∂–∏ —Å–≤–æ–π WebSocket —Å–µ—Ä–≤–µ—Ä
const configuration = {
  sockets: [socket],
  uri: 'sip:your_username@example.com',
  password: 'your_password',
};

const userAgent = new JsSIP.UA(configuration);

// === 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ===
userAgent.on('registered', () => console.log('‚úÖ SIP-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'));
userAgent.on('unregistered', () => console.log('‚ùå SIP-–∞–∫–∫–∞—É–Ω—Ç –æ—Ç–∫–ª—é—á—ë–Ω'));
userAgent.on('registrationFailed', (e) => console.error('‚ö† –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', e.cause));

// === 3. –ó–∞–ø—É—Å–∫ SIP-–∫–ª–∏–µ–Ω—Ç–∞ ===
userAgent.start();

// === 4. –ò—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ ===
function makeCall(destination) {
  const eventHandlers = {
    progress: () => console.log('üìû –ó–≤–æ–Ω–æ–∫ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...'),
    failed: (e) => console.error('‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ —É–¥–∞–ª—Å—è:', e.cause),
    confirmed: () => console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω'),
    ended: () => console.log('üì¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω'),
  };

  const options = { eventHandlers, mediaConstraints: { audio: true, video: false } };
  const session = userAgent.call(destination, options);
}

// === 5. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ ===
userAgent.on('newRTCSession', (e) => {
  const session = e.session;
  console.log('üì≤ –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –æ—Ç:', session.remote_identity.uri.toString());

  session.on('accepted', () => console.log('‚úÖ –í—ã–∑–æ–≤ –ø—Ä–∏–Ω—è—Ç'));
  session.on('ended', () => console.log('üì¥ –í—ã–∑–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω'));

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
  session.answer({ mediaConstraints: { audio: true, video: false } });
});

// === 6. –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö) ===
export { makeCall };
